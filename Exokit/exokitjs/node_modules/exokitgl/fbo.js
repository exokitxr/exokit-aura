const {Texture} = require('./texture');
const {getFormat, getProperty} = require('./gltypes');

class FBO {
    constructor(width, height, options = {}) {
        this.width = width;
        this.height = height;

        if (options.minFilter === undefined) options.minFilter = EXOKIT.LINEAR;

        this.texture = new Texture(null);
        this.texture.generateMipmaps = options.generateMipmaps;

        this.texture.width = width;
        this.texture.height = height;

        this.texture.minFilter = options.minFilter || EXOKIT.LINEAR;
        this.texture.magFilter = options.magFilter || EXOKIT.LINEAR;
        this.texture.wrapS = options.wrapS || EXOKIT.CLAMP_TO_EDGE;
        this.texture.wrapT = options.wrapT || EXOKIT.CLAMP_TO_EDGE;

        this.texture.format = options.format || EXOKIT.RGBFormat;

        if (options.type) this.texture.type = options.type;
    }

    setSize(width, height) {
        this.width = width;
        this.height = height;

        if (!this._gl) return;
        let gl = _gl;

        gl.bindFramebuffer(gl.FRAMEBUFFER, this._gl);
        gl.bindTexture(gl.TEXTURE_2D, this.texture._gl);
        gl.texImage2D(gl.TEXTURE_2D, 0, getFormat(this.texture), this.width, this.height, 0, getFormat(this.texture), gl.UNSIGNED_BYTE, null);

        gl.bindRenderbuffer(gl.RENDERBUFFER, this._depthBuffer);
        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.width, this.height);

        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        gl.bindRenderbuffer(gl.RENDERBUFFER, null);
    }

    create(gl) {
        this._gl = gl.createFramebuffer();
        this._depthBuffer = gl.createRenderbuffer();
        gl.bindRenderbuffer(gl.RENDERBUFFER, this._depthBuffer);
        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.width, this.height);

        gl.bindFramebuffer(gl.FRAMEBUFFER, this._gl);

        this.texture._gl = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.texture._gl);

        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, getProperty(this.texture.wrapS));
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, getProperty(this.texture.wrapT));
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, getProperty(this.texture.magFilter));
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, getProperty(this.texture.minFilter));

        gl.texImage2D(gl.TEXTURE_2D, 0, getFormat(this.texture), this.width, this.height, 0, getFormat(this.texture), gl.UNSIGNED_BYTE, null);

        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture._gl, 0);
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this._depthBuffer);

        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.bindRenderbuffer(gl.RENDERBUFFER, null);
    }

    bind() {
        let gl = _gl;
        if (!this._gl) this.create(gl);

        gl.bindFramebuffer(gl.FRAMEBUFFER, this._gl);
        gl.viewport(0, 0, this.width, this.height);
        gl.clearColor(0, 0, 0, 1);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    }

    unbind() {
        _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);
    }
}

exports = {FBO};
