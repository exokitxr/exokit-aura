const {Group} = require('./group');
const {Quaternion} = require('./math/quaternion');
const {Euler} = require('./math/euler');
const {Matrix4} = require('./math/matrix4');
const {Vector3} = require('./math/vector3');

function radians(degrees) {
    return degrees * (Math.PI / 180);
}

class CameraBase3D extends Group {
    constructor() {
        super();

        this.matrixWorldInverse = new Matrix4();
        this.projectionMatrix = new Matrix4();
    }

    updateMatrixWorld() {
        Group.prototype.updateMatrixWorld.call( this );
        this.matrixWorldInverse.getInverse(this.matrixWorld);
    }

    clone() {
        return new this.constructor().copy(this);
    }
}

class PerspectiveCamera extends CameraBase3D {
    constructor(fov, aspect, near, far) {
        super();
        this.type = 'PerspectiveCamera';

        this.fov = fov || 50;
        this.zoom = 1;

        this.near = near || 0.1;
        this.far = far || 2000;
        this.focus = 10;

        this.aspect = aspect || 1;
        this.filmGauge = 35;
        this.filmOffset = 0;

        this.updateProjectionMatrix();
    }

    clone() {
        return new PerspectiveCamera().copy(this);
    }

    copy(source, recursive) {
        CameraBase3D.prototype.copy.call( this, source, recursive );

        this.fov = source.fov;
        this.zoom = source.zoom;

        this.near = source.near;
        this.far = source.far;
        this.focus = source.focus;

        this.aspect = source.aspect;

        this.filmGauge = source.filmGauge;
        this.filmOffset = source.filmOffset;

        return this;
    }

    updateProjectionMatrix() {
        let near = this.near,
            top = near * Math.tan(radians(0.5 * this.fov) ) / this.zoom,
            height = 2 * top,
            width = this.aspect * height,
            left = - 0.5 * width,
            view = this.view;

        let skew = this.filmOffset;
        if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

        this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );
    }
}

exports = {PerspectiveCamera};
