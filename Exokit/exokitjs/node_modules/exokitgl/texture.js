const {getFormat, getProperty} = require('./gltypes');

EXOKIT.NEAREST = 'texture_nearest';
EXOKIT.CLAMP_TO_EDGE = 'texture_clamp';
EXOKIT.REPEAT = 'texture_repeat';
EXOKIT.MIRROR_REPEAT = 'texture_mirror_repeat';
EXOKIT.LINEAR = 'texture_linear';
EXOKIT.LINEAR_MIPMAP = 'texture_linear_mip';
EXOKIT.LINEAR_MIPMAP_NEAREST = 'texture_linear_mip_nearest';
EXOKIT.NEAREST_MIPMAP = 'texture_nearest_mip';
EXOKIT.RGBFormat = 'texture_rgbFormat';
EXOKIT.RGBAFormat = 'texture_rgbaFormat';
EXOKIT.UNSIGNED_BYTE = 'texture_unsigned_byte';
EXOKIT.DEPTH = 'texture_depth';
EXOKIT.FLOAT = 'texture_float';
EXOKIT.HALF_FLOAT = 'texture_half_float';

class Texture {
    constructor(img) {
        this.image = img;

        this.magFilter = EXOKIT.LINEAR;
        this.minFilter = EXOKIT.LINEAR_MIPMAP;
        this.format = EXOKIT.RGBAFormat;
        this.wrapS = this.wrapT = EXOKIT.CLAMP_TO_EDGE;
        this.image = img;
        this.needsUpdate = false;
        this.generateMipmaps = true;
        this.anisotropy = 1;
        this.type = EXOKIT.UNSIGNED_BYTE;
        this.isTexture = true;

        this.create();
    }

    create() {
        let format = getFormat(this);
        this._gl = _gl.createTexture();
        _gl.bindTexture(_gl.TEXTURE_2D, this._gl);
        _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, getProperty(this.wrapS));
        _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, getProperty(this.wrapT));
        _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, getProperty(this.magFilter));
        _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, getProperty(this.minFilter));
    }

    update() {
        let format = getFormat(this);
        _gl.texImage2D(_gl.TEXTURE_2D, 0, format, format, _gl.UNSIGNED_BYTE, this.image);
    }
}

exports = {Texture};
